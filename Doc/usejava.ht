Title: Accessing Java from Jython

<h3>Accessing Java from Jython</h3>

<P>One of the goals of Jython is to make it as simple as possible to
use existing Java libraries from Python.

<H3>Example</H3>

<P>The following example of an interactive session with Jython shows
how a user could create an instance of the Java random number class
(found in java.util.Random) and then interact with that instance.</P>

<blockquote><PRE>
C:\jython&gt;jython
Jython 2.0 on java1.2.1
Type "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; from java.util import Random
&gt;&gt;&gt; r = Random()
&gt;&gt;&gt; r.nextInt()
-790940041
&gt;&gt;&gt; for i in range(5):
...&nbsp;&nbsp;&nbsp;&nbsp; print r.nextDouble()
...
0.23347681506123852
0.8526595592189546
0.3647833839988137
0.3384865260567278
0.5514469740469587
&gt;&gt;&gt;
</PRE></blockquote>

<H3>More Details</H3>

<P>Hopefully, this example should make it clear that there are very
few differences between using Java packages and using Python packages
when working under Jython. There are a few things to keep in mind.

<H4>Importing</H4>

<p>
<blockquote><pre>
Jython 2.0 on java1.2.1
Type "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; from java.util import *
&gt;&gt;&gt; Random
&lt;jclass java.util.Random at 31702169&gt;
&gt;&gt;&gt; Hashtable
&lt;jclass java.util.Hashtable at 7538094&gt;
&gt;&gt;&gt; 
</pre></blockquote>

<H4>Creating Class Instances</H4>

<P>You can create an instance of a Java class exactly the way you
would create an instance of a Python class. You must &quot;call&quot;
the class with a set of arguments that is appropriate for one of the
Java class's constructors. See the section below for more details on
what constitutes appropriate arguments.

<H4>Calling Java Methods and Functions</H4>

<P>Java classes have both static and instance methods, which makes them
behave much like a cross between a Python module and class. As a
user, you should rarely need to be concerned with this difference.</P>

<P>Java methods and functions are called just exactly like their
Python counterparts. There is some automatic type coercion that goes
on both for the types being passed in and for the value returned by
the method. The following table shows how Python objects are coerced
to Java objects when passed as arguments in a function call. The
<em>Java Types</em> show the expected Java type for the argument,
and the <em>Allowed Python Types</em>
shows what Python objects can be converted to the given
Java type. Notice the special behavior of <code>String</code>s when a
<code>java.lang.Object</code> is expected. This behavior might change if
it turns out to cause problems.

<p><table border="1">
<colgroup>
<col width="20%"/>
<col width="70%"/>
</colgroup>
<thead valign="bottom">
<tr><th class="head">Java Types</th>
<th class="head">Allowed Python Types</th>
</tr>
</thead>
<tbody valign="top">
<tr><td>char</td>
<td>str (must have length 1)</td>
</tr>
<tr><td>boolean</td>
<td>bool, int (true = nonzero)</td>
</tr>
<tr><td>byte, short, int, long</td>
<td>int</td>
</tr>
<tr><td>float, double</td>
<td>float</td>
</tr>
<tr><td>java.lang.String, byte[], char[]</td>
<td>string (will be encoded), unicode</td>
</tr>
<tr><td>java.lang.Class Class
or JavaClass</td>
<td>(only if class subclasses from exactly one Java class; mutiple inheritance from more than one Java
class is illegal)</td>
</tr>
<tr><td>Foo[]</td>
<td>array (must contain objects of class or subclass of Foo), jarray (legacy)</td>
</tr>
<tr><td>java.lang.Object</td>
<td>string or unicode -&gt; java.lang.String, all others unchanged</td>
</tr>
<tr><td>org.python.core.PyObject</td>
<td>All unchanged</td>
</tr>
<tr><td>Foo</td>
<td>Instance-&gt;Foo (if Instance is subclass of Foo);
JavaInstance -&gt; Foo (if JavaInstance is instance of Foo or subclass)</td>
</tr>
</tbody>
</table>

<p>Returned values from a Java method are also possibly coerced back to
an object that is more readily usable in Python. The following table
shows those coercions.
<p><table border="1">
<colgroup>
<col width="35%" />
<col width="55%" />
</colgroup>
<thead valign="bottom">
<tr><th class="head">Java Type</th>
<th class="head">Returned Python Type</th>
</tr>
</thead>
<tbody valign="top">
<tr><td>char</td>
<td>unicode (of length 1)</td>
</tr>
<tr><td>boolean</td>
<td>bool</td>
</tr>
<tr><td>byte, short, int, long</td>
<td>int</td>
</tr>
<tr><td>float, double</td>
<td>float</td>
</tr>
<tr><td>java.lang.String</td>
<td>unicode</td>
</tr>
<tr><td>java.lang.Class</td>
<td>type for the given Java class</td>
</tr>
<tr><td>Foo[]</td>
<td>array (containing objects of class or subclass of Foo)</td>
</tr>
<tr><td>org.python.core.PyObject (or subclass)</td>
<td>Unchanged</td>
</tr>
<tr><td>Foo</td>
<td>instance which represents the Java Class Foo</td>
</tr>
</tbody>
</table>

<p><TABLE BORDER="1" WIDTH="100%">
 <TR>
	<TH>Java Type</TH>
	<TH>Returned Python Type</TH>
 </TR>
 <TR>
	<TD>char</TD>
	<TD>String (of length 1) </TD>
 </TR>
 <TR>
	<TD>boolean</TD>
	<TD>Integer (true = 1, false = 0) </TD>
 </TR>
 <TR>
	<TD>byte, short, int, long</TD>
	<TD>Integer</TD>
 </TR>
 <TR>
	<TD>float, double</TD>
	<TD>Float</TD>
 </TR>
 <TR>
	<TD>java.lang.String</TD>
	<TD>String </TD>
 </TR>
 <TR>
	<TD>java.lang.Class</TD>
	<TD>JavaClass which represents given Java class</TD>
 </TR>
 <TR>
	<TD>Foo[]</TD>
	<TD>Array (containing objects of class or subclass of Foo)</TD>
 </TR>
 <TR>
	<TD>org.python.core.PyObject (or subclass)</TD>
	<TD>Unchanged </TD>
 </TR>
 <TR>
	<TD>Foo</TD>
	<TD>JavaInstance which represents the Java Class Foo</TD>
 </TR>
</TABLE>
 
<H4>Overloaded Java Method Signatures</H4>

<P>Java methods are allowed to be overloaded for different signatures
(types and number of arguments). When different versions of the method
differ in the number of arguments that they expect, the appropriate
method can be easily determined from the number of arguments passed to
the method.</P>

<P>When the difference is instead in the types of the arguments, more
work is required. The possible signatures are sorted in a consistent
order that should ensure the appropriate method is chosen first.

<P>If you need to call a Java method with a particular signature and
this is not happening in the easy way, you can use the following
workaround:</P>

<P>Assume that foo has two methods, &quot;void foo(int x); void
foo(byte x);&quot;. To call the second method you could write the
following:</P>

<blockquote><PRE>
from java.lang import Byte
foo(Byte(10))
</PRE></blockquote>

<H4>Naming Conflicts with Python Keywords</H4>

<P>Because Java has a different set of keywords than Python, there are
many Java classes that have method and function names that conflict
with Python's keyword set. Where the intent can be unambiguously
determined, no identifier mangling is necessary, such as when keywords 
are used as attributes on objects. Thus you can naturally write:

<blockquote><PRE>
<code>java.lang.System.out.print("hi")</code>
</PRE></blockquote>

or

<blockquote><PRE>
<code>java.lang.Runtime.getRuntime().exec(cmd)</code>
</PRE></blockquote>

<p>In the rare case where the conflict can't be resolved due to Python's
grammar, you should modify the reserved word by appended an underscore 
to the end of it, e.g. <code>print_</code>.

